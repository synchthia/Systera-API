syntax = "proto3";
package systerapb;

option go_package = "./systerapb";
option java_package = "net.synchthia.api.systera";
option java_outer_classname = "SysteraProtos";

message Empty {}

/*
 * Systera API
 */
service Systera {
  rpc Announce(AnnounceRequest) returns (Empty) {}
  rpc Dispatch(DispatchRequest) returns (Empty) {}

  // Chat
  rpc Chat(ChatRequest) returns (Empty) {}
  rpc AddChatIgnore(AddChatIgnoreRequest) returns (ChatIgnoreResponse) {}
  rpc RemoveChatIgnore(RemoveChatIgnoreRequest) returns (ChatIgnoreResponse) {}

  // Player
  rpc GetPlayerIdentityByName(GetPlayerIdentityByNameRequest)
      returns (GetPlayerIdentityByNameResponse) {}

  rpc InitPlayerProfile(InitPlayerProfileRequest)
      returns (InitPlayerProfileResponse) {}
  rpc FetchPlayerProfile(FetchPlayerProfileRequest)
      returns (FetchPlayerProfileResponse) {}
  rpc FetchPlayerProfileByName(FetchPlayerProfileByNameRequest)
      returns (FetchPlayerProfileResponse) {}

  rpc SetPlayerGroups(SetPlayerGroupsRequest) returns (Empty);
  rpc SetPlayerServer(SetPlayerServerRequest) returns (Empty);
  rpc RemovePlayerServer(RemovePlayerServerRequest) returns (Empty);
  rpc SetPlayerSettings(SetPlayerSettingsRequest) returns (Empty);

  rpc AltLookup(AltLookupRequest) returns (AltLookupResponse);

  rpc GetPlayerPunish(GetPlayerPunishRequest)
      returns (GetPlayerPunishResponse) {}
  rpc SetPlayerPunish(SetPlayerPunishRequest)
      returns (SetPlayerPunishResponse) {}
  rpc UnBan(UnBanRequest) returns (UnBanResponse) {}

  rpc Report(ReportRequest) returns (ReportResponse) {}

  rpc FetchGroups(FetchGroupsRequest) returns (FetchGroupsResponse) {}

  rpc CreateGroup(CreateGroupRequest) returns (Empty) {}
  rpc RemoveGroup(RemoveGroupRequest) returns (Empty) {}

  rpc AddPermission(AddPermissionRequest) returns (Empty) {}
  rpc RemovePermission(RemovePermissionRequest) returns (Empty) {}
}

/*
 * API Result
 */
enum CallResult {
  SUCCESS = 0;
  NOT_FOUND = 1;
  DUPLICATED = 2;
}

/*
 * Stream API
 */
message AnnounceRequest {
  string target = 1;
  string message = 2;
}

message DispatchRequest {
  string target = 1;
  string cmd = 2;
}

message ChatEntry {
  // author - name with diplayName
  PlayerIdentity author = 1;
  string server_name = 2;
  string message = 3;
}

message ChatRequest { ChatEntry entry = 1; }

message AddChatIgnoreRequest {
  string uuid = 1;
  PlayerIdentity target = 2;
}

message RemoveChatIgnoreRequest {
  string uuid = 1;
  PlayerIdentity target = 2;
}

message ChatIgnoreResponse {
  CallResult result = 1;
  PlayerIdentity identity = 2;
}

// ----------------
// STREAMING
// ----------------

// System
message SystemStream {
  enum Type {
    DISPATCH = 0;
    ANNOUNCE = 1;
  }
  Type type = 1;
  string msg = 2;
}

// Player
message PlayerStream {
  enum Type {
    ALL = 0;
    GROUPS = 1;
    SETTINGS = 2;
  }
  Type type = 1;
  PlayerEntry entry = 2;
}

// Punishment
message PunishmentStream {
  enum Type {
    PUNISH = 0;
    REPORT = 1;
  }
  Type type = 1;
  PunishStreamEntry punish_stream_entry = 2;
  ReportEntry report_entry = 3;
}

message PunishStreamEntry {
  PunishEntry entry = 1;
  bool require_execute = 2;
}

// Group
message GroupStream {
  enum Type {
    GROUP = 0;
    PERMISSIONS = 1;
  }
  Type type = 1;
  GroupEntry group_entry = 2;
}

// TextMessage
message ChatStream {
  enum Type {
    CHAT = 0;
  }
  Type type = 1;
  ChatEntry chat_entry = 2;
}

/*
 * PLAYER PROFILE
 */
message PlayerIdentity {
  string uuid = 1;
  string name = 2;
}

message GetPlayerIdentityByNameRequest { string name = 1; }

message GetPlayerIdentityByNameResponse {
  PlayerIdentity identity = 1;
  bool exists = 2;
}

message PlayerSettings {
  bool join_message = 1;
  bool vanish = 2;
  bool japanize = 3;
  bool global_chat = 4;
}

message PlayerEntry {
  string uuid = 1;
  string name = 2;
  string current_server = 3;
  int64 first_login = 4;
  int64 last_login = 5;
  repeated string groups = 6;
  PlayerSettings settings = 7;
  repeated PlayerIdentity player_ignore = 8;
}

message InitPlayerProfileRequest {
  string uuid = 1;
  string name = 2;
  string ip_address = 3;
  string hostname = 4;
}

message InitPlayerProfileResponse { PlayerEntry entry = 1; }

message FetchPlayerProfileRequest { string uuid = 1; }
message FetchPlayerProfileByNameRequest { string name = 1; }
message FetchPlayerProfileResponse { PlayerEntry entry = 1; }

message SetPlayerGroupsRequest {
  string uuid = 1;
  repeated string groups = 2;
}

message SetPlayerServerRequest {
  string uuid = 1;
  string server_name = 2;
}
message RemovePlayerServerRequest {
  string uuid = 1;
  string server_name = 2;
}

message SetPlayerSettingsRequest {
  string uuid = 1;
  PlayerSettings settings = 2;
}

/*
 * ALTLOOKUP
 */
message AddressesEntry {
  string address = 1;
  string hostname = 2;
  int64 first_seen = 3;
  int64 last_seen = 4;
}
message AltLookupEntry {
  string uuid = 1;
  string name = 2;
  repeated AddressesEntry addresses = 3;
}
message AltLookupRequest { string player_uuid = 1; }
message AltLookupResponse { repeated AltLookupEntry entries = 1; }

/*
 * PLAYER PUNISHMENTS
 */
enum PunishLevel {
  UNKNOWN = 0;
  WARN = 1;
  KICK = 2;
  TEMPBAN = 3;
  PERMBAN = 4;
}

message PunishEntry {
  bool available = 1;

  PunishLevel level = 2;
  string reason = 3;

  int64 date = 4;
  int64 expire = 5;

  PlayerIdentity punished_from = 6;
  PlayerIdentity punished_to = 7;
}

message GetPlayerPunishRequest {
  string uuid = 1;
  PunishLevel filter_level = 2;
  bool include_expired = 3;
}
message GetPlayerPunishResponse { repeated PunishEntry entry = 1; }

message SetPlayerPunishRequest {
  // remote - use with stream?
  bool remote = 1;

  // force - force punish? (without InitPlayerProfile phase)
  bool force = 2;

  // entry - Punishment details
  PunishEntry entry = 3;
}
message SetPlayerPunishResponse {
  bool no_profile = 1;
  bool offline = 2;
  bool duplicate = 3;
  bool cooldown = 4;
}

message UnBanRequest { PlayerIdentity target = 1; }

message UnBanResponse {}

message ReportEntry {
  PlayerIdentity from = 1;
  PlayerIdentity to = 2;
  string message = 3;
  int64 date = 4;
  string server = 5;
}
message ReportRequest {
  PlayerIdentity from = 1;
  PlayerIdentity to = 2;
  string server_name = 3;
  string message = 4;
}
message ReportResponse {}

/*
 * GROUP PERMISISONS
 */
message GroupEntry {
  string group_name = 1;
  string group_prefix = 2;
  repeated PermissionsEntry permissions = 3;
}
message PermissionsEntry {
  string server_name = 1;
  repeated string permissions = 2;
}

message FetchGroupsRequest {}
message FetchGroupsResponse { repeated GroupEntry groups = 1; }

message CreateGroupRequest { GroupEntry group_entry = 1; }

message RemoveGroupRequest { string group_name = 1; }

message AddPermissionRequest {
  string group_name = 1;
  string target = 2;
  repeated string permissions = 3;
}
// Empty//

message RemovePermissionRequest {
  string group_name = 1;
  string target = 2;
  repeated string permissions = 3;
}
